syntax = "proto3";

package auth;

option go_package = "gen/go/auth";

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

service Auth {
  rpc Register (RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/register"
      body: "*"
    };
  };
  rpc Login (LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/login"
      body: "*"
    };
  };
  rpc ValidateUser (ValidateUserRequest) returns (ValidateUserResponse) {
    option (google.api.http) = {
      post: "/validate-user"
      body: "*"
    };
  };
  rpc Refresh (RefreshRequest) returns (RefreshResponse) {
    option (google.api.http) = {
      post: "/refresh"
      body: "*"
    };
  };
  rpc GetUsers (GetUsersRequest) returns (GetUsersResponse) {
    option (google.api.http) = {
      post: "/users"
      body: "*"
    };
  };
  rpc GetUserByToken (GetUserByTokenRequest) returns (User) {
    option (google.api.http) = {
      post: "/user"
      body: "*"
    };
  };
  rpc DeleteUser (DeleteUserRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/user/rm"
      body: "*"
    };
  };
}

// auth.register

message RegisterRequest {
  string email = 1;
  string password = 2;
}

message RegisterResponse {
  int64 user_id = 1;
}

// auth.login

message LoginRequest {
  string email = 1;
  string password = 2;
}

message LoginResponse {
  string access_token = 1;
  string refresh_token = 2;
}

// auth.validate.customer

message ValidateUserRequest {
  string access_token = 1;
  int64 required_role = 2;
}

message ValidateUserResponse {
  bool valid = 1;
}

// auth.refresh

message RefreshRequest {
  string refresh_token = 1;
}

message RefreshResponse{
  string access_token = 1;
  string refresh_token = 2;
}

// user

message User {
  string Username = 1;
  string Email = 2;
  string RoleId = 3;
}

// user.get-all

message GetUsersRequest {
  int64 RoleId = 1;
  string NameStartsWith = 2;
}

message GetUsersResponse {
  repeated User users = 1;
}

// user.get-by-token

message GetUserByTokenRequest {
  string AccessToken = 1;
}

// user.delete

message DeleteUserRequest {
  string Username = 1;
}