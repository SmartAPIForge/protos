syntax = "proto3";

package project;

option go_package = "gen/go/codegen";

service ProjectService {
  rpc GetAllUserProjects(GetAllUserProjectsRequest) returns (ListOfProjectsResponse);
  rpc StreamUserProjectsUpdates (Owner) returns (stream ProjectResponse);
  rpc InitProject(InitProjectRequest) returns (ProjectResponse);
  rpc UpdateProject(UpdateProjectRequest) returns (ProjectResponse);
  rpc GetFilteredProjects(GetFilteredProjectsRequest) returns (ListOfProjectsResponse);
  rpc DeleteProject(ProjectUniqueIdentifier) returns (DeleteProjectResponse);
}

// REQUEST

message Owner {
  string owner = 1;
}

message GetAllUserProjectsRequest {
  string owner = 1;
  string page = 2; // current page
  string limit = 3; // projects per page
}

message ProjectUniqueIdentifier {
  string owner = 1;
  string name = 2;
}

message InitProjectRequest {
  ProjectUniqueIdentifier composeId = 1;
}

message UpdateProjectRequest {
  ProjectUniqueIdentifier composeId = 1;
  string data = 2;
}

message GetFilteredProjectsRequest {
  string Page = 1;
  string Limit = 2;
  string Owner = 3;
  string Status = 4;
  string NamePrefix = 5;
}

// RESPONSE

message ProjectInfo {
  string data = 1;
  string status = 2;
  string urlZip = 3;
  string urlDeploy = 4;
  int64 updatedAt = 5;
  int64 createdAt = 6;
}

message ProjectResponse {
  ProjectUniqueIdentifier composeId = 1;
  ProjectInfo info = 2;
}

message ListOfProjectsResponse {
  repeated ProjectResponse projects = 1;
}

message DeleteProjectResponse {
  bool Success = 1;
}