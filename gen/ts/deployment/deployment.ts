// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.29.3
// source: deployment/deployment.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "deployment";

export interface RemoveServerRequest {
  id: number;
}

export interface RemoveServerResponse {
  status: boolean;
}

export interface ServerPreview {
  id: number;
  ip: string;
  port: number;
  user: string;
}

export interface Server {
  id: number;
  ip: string;
  port: number;
  user: string;
  password: string;
}

export interface ListServersRequest {
}

export interface ListServersResponse {
  servers: ServerPreview[];
}

export interface AddServerRequest {
  ip: string;
  port: number;
  user: string;
  password: string;
}

export interface AddServerResponse {
  server: ServerPreview | undefined;
}

export interface DeployContainerRequest {
  serverId: number;
  image: string;
}

export interface DeployContainerResponse {
  status: string;
}

export const DEPLOYMENT_PACKAGE_NAME = "deployment";

export interface DeploymentServiceClient {
  listServers(request: ListServersRequest): Observable<ListServersResponse>;

  addServer(request: AddServerRequest): Observable<AddServerResponse>;

  removeServer(request: RemoveServerRequest): Observable<RemoveServerResponse>;
}

export interface DeploymentServiceController {
  listServers(
    request: ListServersRequest,
  ): Promise<ListServersResponse> | Observable<ListServersResponse> | ListServersResponse;

  addServer(request: AddServerRequest): Promise<AddServerResponse> | Observable<AddServerResponse> | AddServerResponse;

  removeServer(
    request: RemoveServerRequest,
  ): Promise<RemoveServerResponse> | Observable<RemoveServerResponse> | RemoveServerResponse;
}

export function DeploymentServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["listServers", "addServer", "removeServer"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("DeploymentService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("DeploymentService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const DEPLOYMENT_SERVICE_NAME = "DeploymentService";
