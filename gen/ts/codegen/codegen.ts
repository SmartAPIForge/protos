// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.28.2
// source: codegen/codegen.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "codegen";

export enum GenerationStatus {
  UNKNOWN = 0,
  PENDING = 1,
  SUCCESS = 2,
  FAIL = 3,
  UNRECOGNIZED = -1,
}

export interface SafRequest {
  data: string;
}

export interface TrackDTO {
  id: string;
}

export interface GenerationStatusResponse {
  status: GenerationStatus;
}

export const CODEGEN_PACKAGE_NAME = "codegen";

export interface CodegenServiceClient {
  generate(request: SafRequest): Observable<TrackDTO>;

  track(request: TrackDTO): Observable<GenerationStatusResponse>;
}

export interface CodegenServiceController {
  generate(request: SafRequest): Promise<TrackDTO> | Observable<TrackDTO> | TrackDTO;

  track(
    request: TrackDTO,
  ): Promise<GenerationStatusResponse> | Observable<GenerationStatusResponse> | GenerationStatusResponse;
}

export function CodegenServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["generate", "track"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("CodegenService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("CodegenService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const CODEGEN_SERVICE_NAME = "CodegenService";
