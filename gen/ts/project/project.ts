// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.28.2
// source: project/project.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "project";

export interface Owner {
  owner: string;
}

export interface GetAllUserProjectsRequest {
  owner: string;
  /** current page */
  page: string;
  /** projects per page */
  limit: string;
}

export interface ProjectUniqueIdentifier {
  owner: string;
  name: string;
}

export interface InitProjectRequest {
  composeId: ProjectUniqueIdentifier | undefined;
}

export interface UpdateProjectRequest {
  composeId: ProjectUniqueIdentifier | undefined;
  data: string;
}

export interface GetFilteredProjectsRequest {
  Page: string;
  Limit: string;
  Owner: string;
  Status: string;
  NamePrefix: string;
}

export interface ProjectInfo {
  data: string;
  status: string;
  urlZip: string;
  urlDeploy: string;
  updatedAt: number;
  createdAt: number;
}

export interface ProjectResponse {
  composeId: ProjectUniqueIdentifier | undefined;
  info: ProjectInfo | undefined;
}

export interface ListOfProjectsResponse {
  projects: ProjectResponse[];
}

export interface DeleteProjectResponse {
  Success: boolean;
}

export const PROJECT_PACKAGE_NAME = "project";

export interface ProjectServiceClient {
  getAllUserProjects(request: GetAllUserProjectsRequest): Observable<ListOfProjectsResponse>;

  streamUserProjectsUpdates(request: Owner): Observable<ProjectResponse>;

  initProject(request: InitProjectRequest): Observable<ProjectResponse>;

  updateProject(request: UpdateProjectRequest): Observable<ProjectResponse>;

  getFilteredProjects(request: GetFilteredProjectsRequest): Observable<ListOfProjectsResponse>;

  deleteProject(request: ProjectUniqueIdentifier): Observable<DeleteProjectResponse>;
}

export interface ProjectServiceController {
  getAllUserProjects(
    request: GetAllUserProjectsRequest,
  ): Promise<ListOfProjectsResponse> | Observable<ListOfProjectsResponse> | ListOfProjectsResponse;

  streamUserProjectsUpdates(request: Owner): Observable<ProjectResponse>;

  initProject(request: InitProjectRequest): Promise<ProjectResponse> | Observable<ProjectResponse> | ProjectResponse;

  updateProject(
    request: UpdateProjectRequest,
  ): Promise<ProjectResponse> | Observable<ProjectResponse> | ProjectResponse;

  getFilteredProjects(
    request: GetFilteredProjectsRequest,
  ): Promise<ListOfProjectsResponse> | Observable<ListOfProjectsResponse> | ListOfProjectsResponse;

  deleteProject(
    request: ProjectUniqueIdentifier,
  ): Promise<DeleteProjectResponse> | Observable<DeleteProjectResponse> | DeleteProjectResponse;
}

export function ProjectServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "getAllUserProjects",
      "streamUserProjectsUpdates",
      "initProject",
      "updateProject",
      "getFilteredProjects",
      "deleteProject",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProjectService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProjectService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROJECT_SERVICE_NAME = "ProjectService";
