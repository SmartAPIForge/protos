// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               v5.28.2
// source: project/project.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "project";

export enum ProjectStatus {
  NEW = 0,
  GENERATE_PENDING = 2,
  GENERATE_SUCCESS = 3,
  GENERATE_FAIL = 4,
  DEPLOY_PENDING = 5,
  DEPLOY_SUCCESS = 6,
  DEPLOY_FAIL = 7,
  RUNNING = 8,
  STOPPED = 9,
  FAILED = 10,
  UNRECOGNIZED = -1,
}

export interface Owner {
  owner: string;
}

export interface GetAllUserProjectsRequest {
  owner: string;
  /** current page */
  page: string;
  /** projects per page */
  limit: string;
}

export interface ProjectUniqueIdentifier {
  owner: string;
  name: string;
}

export interface InitProjectRequest {
  composeId: ProjectUniqueIdentifier | undefined;
}

export interface UpdateProjectRequest {
  composeId: ProjectUniqueIdentifier | undefined;
  data: string;
}

export interface ProjectInfo {
  data: string;
  status: ProjectStatus;
  urlZip: string;
  urlDeploy: string;
  updatedAt: number;
  createdAt: number;
}

export interface ProjectResponse {
  composeId: ProjectUniqueIdentifier | undefined;
  info: ProjectInfo | undefined;
}

export interface ListOfProjectsResponse {
  projects: ProjectResponse[];
}

export const PROJECT_PACKAGE_NAME = "project";

export interface ProjectServiceClient {
  getAllUserProjects(request: GetAllUserProjectsRequest): Observable<ListOfProjectsResponse>;

  streamUserProjectsUpdates(request: Owner): Observable<ProjectResponse>;

  initProject(request: InitProjectRequest): Observable<ProjectResponse>;

  updateProject(request: UpdateProjectRequest): Observable<ProjectResponse>;
}

export interface ProjectServiceController {
  getAllUserProjects(
    request: GetAllUserProjectsRequest,
  ): Promise<ListOfProjectsResponse> | Observable<ListOfProjectsResponse> | ListOfProjectsResponse;

  streamUserProjectsUpdates(request: Owner): Observable<ProjectResponse>;

  initProject(request: InitProjectRequest): Promise<ProjectResponse> | Observable<ProjectResponse> | ProjectResponse;

  updateProject(
    request: UpdateProjectRequest,
  ): Promise<ProjectResponse> | Observable<ProjectResponse> | ProjectResponse;
}

export function ProjectServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getAllUserProjects", "streamUserProjectsUpdates", "initProject", "updateProject"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProjectService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProjectService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PROJECT_SERVICE_NAME = "ProjectService";
