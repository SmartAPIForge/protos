// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: project/project.proto

package codegen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CodegenService_GetUniqueUserProject_FullMethodName = "/project.CodegenService/GetUniqueUserProject"
	CodegenService_GetAllUserProjects_FullMethodName   = "/project.CodegenService/GetAllUserProjects"
	CodegenService_InitProject_FullMethodName          = "/project.CodegenService/InitProject"
	CodegenService_UpdateProject_FullMethodName        = "/project.CodegenService/UpdateProject"
	CodegenService_WatchProjectStatus_FullMethodName   = "/project.CodegenService/WatchProjectStatus"
)

// CodegenServiceClient is the client API for CodegenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CodegenServiceClient interface {
	GetUniqueUserProject(ctx context.Context, in *GetUniqueUserProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	GetAllUserProjects(ctx context.Context, in *GetAllUserProjectsRequest, opts ...grpc.CallOption) (*ListOfProjectsResponse, error)
	InitProject(ctx context.Context, in *InitProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error)
	WatchProjectStatus(ctx context.Context, in *ProjectUniqueIdentifier, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProjectStatusResponse], error)
}

type codegenServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCodegenServiceClient(cc grpc.ClientConnInterface) CodegenServiceClient {
	return &codegenServiceClient{cc}
}

func (c *codegenServiceClient) GetUniqueUserProject(ctx context.Context, in *GetUniqueUserProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, CodegenService_GetUniqueUserProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codegenServiceClient) GetAllUserProjects(ctx context.Context, in *GetAllUserProjectsRequest, opts ...grpc.CallOption) (*ListOfProjectsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListOfProjectsResponse)
	err := c.cc.Invoke(ctx, CodegenService_GetAllUserProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codegenServiceClient) InitProject(ctx context.Context, in *InitProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, CodegenService_InitProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codegenServiceClient) UpdateProject(ctx context.Context, in *UpdateProjectRequest, opts ...grpc.CallOption) (*ProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProjectResponse)
	err := c.cc.Invoke(ctx, CodegenService_UpdateProject_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *codegenServiceClient) WatchProjectStatus(ctx context.Context, in *ProjectUniqueIdentifier, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ProjectStatusResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &CodegenService_ServiceDesc.Streams[0], CodegenService_WatchProjectStatus_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ProjectUniqueIdentifier, ProjectStatusResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CodegenService_WatchProjectStatusClient = grpc.ServerStreamingClient[ProjectStatusResponse]

// CodegenServiceServer is the server API for CodegenService service.
// All implementations must embed UnimplementedCodegenServiceServer
// for forward compatibility.
type CodegenServiceServer interface {
	GetUniqueUserProject(context.Context, *GetUniqueUserProjectRequest) (*ProjectResponse, error)
	GetAllUserProjects(context.Context, *GetAllUserProjectsRequest) (*ListOfProjectsResponse, error)
	InitProject(context.Context, *InitProjectRequest) (*ProjectResponse, error)
	UpdateProject(context.Context, *UpdateProjectRequest) (*ProjectResponse, error)
	WatchProjectStatus(*ProjectUniqueIdentifier, grpc.ServerStreamingServer[ProjectStatusResponse]) error
	mustEmbedUnimplementedCodegenServiceServer()
}

// UnimplementedCodegenServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCodegenServiceServer struct{}

func (UnimplementedCodegenServiceServer) GetUniqueUserProject(context.Context, *GetUniqueUserProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUniqueUserProject not implemented")
}
func (UnimplementedCodegenServiceServer) GetAllUserProjects(context.Context, *GetAllUserProjectsRequest) (*ListOfProjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllUserProjects not implemented")
}
func (UnimplementedCodegenServiceServer) InitProject(context.Context, *InitProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitProject not implemented")
}
func (UnimplementedCodegenServiceServer) UpdateProject(context.Context, *UpdateProjectRequest) (*ProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProject not implemented")
}
func (UnimplementedCodegenServiceServer) WatchProjectStatus(*ProjectUniqueIdentifier, grpc.ServerStreamingServer[ProjectStatusResponse]) error {
	return status.Errorf(codes.Unimplemented, "method WatchProjectStatus not implemented")
}
func (UnimplementedCodegenServiceServer) mustEmbedUnimplementedCodegenServiceServer() {}
func (UnimplementedCodegenServiceServer) testEmbeddedByValue()                        {}

// UnsafeCodegenServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CodegenServiceServer will
// result in compilation errors.
type UnsafeCodegenServiceServer interface {
	mustEmbedUnimplementedCodegenServiceServer()
}

func RegisterCodegenServiceServer(s grpc.ServiceRegistrar, srv CodegenServiceServer) {
	// If the following call pancis, it indicates UnimplementedCodegenServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CodegenService_ServiceDesc, srv)
}

func _CodegenService_GetUniqueUserProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUniqueUserProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodegenServiceServer).GetUniqueUserProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodegenService_GetUniqueUserProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodegenServiceServer).GetUniqueUserProject(ctx, req.(*GetUniqueUserProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodegenService_GetAllUserProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAllUserProjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodegenServiceServer).GetAllUserProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodegenService_GetAllUserProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodegenServiceServer).GetAllUserProjects(ctx, req.(*GetAllUserProjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodegenService_InitProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodegenServiceServer).InitProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodegenService_InitProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodegenServiceServer).InitProject(ctx, req.(*InitProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodegenService_UpdateProject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CodegenServiceServer).UpdateProject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CodegenService_UpdateProject_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CodegenServiceServer).UpdateProject(ctx, req.(*UpdateProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CodegenService_WatchProjectStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectUniqueIdentifier)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CodegenServiceServer).WatchProjectStatus(m, &grpc.GenericServerStream[ProjectUniqueIdentifier, ProjectStatusResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type CodegenService_WatchProjectStatusServer = grpc.ServerStreamingServer[ProjectStatusResponse]

// CodegenService_ServiceDesc is the grpc.ServiceDesc for CodegenService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CodegenService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "project.CodegenService",
	HandlerType: (*CodegenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUniqueUserProject",
			Handler:    _CodegenService_GetUniqueUserProject_Handler,
		},
		{
			MethodName: "GetAllUserProjects",
			Handler:    _CodegenService_GetAllUserProjects_Handler,
		},
		{
			MethodName: "InitProject",
			Handler:    _CodegenService_InitProject_Handler,
		},
		{
			MethodName: "UpdateProject",
			Handler:    _CodegenService_UpdateProject_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchProjectStatus",
			Handler:       _CodegenService_WatchProjectStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "project/project.proto",
}
